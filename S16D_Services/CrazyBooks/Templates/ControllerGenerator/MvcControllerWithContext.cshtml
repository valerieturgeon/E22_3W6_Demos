@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using System.Collections.Generic;
@using System.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
@{
    foreach (var namespaceName in Model.RequiredNamespaces)
    {
@:using @namespaceName;
    }
}

namespace @Model.ControllerNamespace
{
@{
    string routePrefix;
    if (String.IsNullOrEmpty(Model.AreaName))
    {
        routePrefix = Model.ControllerRootName;
    }
    else
    {
        routePrefix = Model.AreaName + "/" + Model.ControllerRootName;
    }
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyNullableTypeName = GetNullableTypeName(primaryKeyType, primaryKeyShortTypeName);
    var modelProperties = new List<string>();
    foreach (var property in Model.ModelMetadata.Properties)
    {
        if (property.Scaffold)
        {
            modelProperties.Add(property.PropertyName);
        }
    }
    var bindString = string.Join(",", modelProperties);
    var contextTypeName = Model.ContextTypeName;
    var entitySetVar = Model.EntitySetVariable ??
        (String.IsNullOrEmpty(entitySetName)
            ? entitySetName
            : (entitySetName.Substring(0, length: 1).ToLowerInvariant() + entitySetName.Substring(1)));
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var lambdaVar = Model.ModelVariable[0];
    var relatedProperties = new Dictionary<string, dynamic>();
    foreach (var nav in Model.ModelMetadata.Navigations)
    {
        relatedProperties.Add(nav.AssociationPropertyName, nav);

    }

    var inlineIncludes = "";
    foreach (var property in relatedProperties.Values)
    {
        inlineIncludes += string.Format("{0}.Include({1} => {1}.{2})", Environment.NewLine, lambdaVar, property.AssociationPropertyName);
    }

    if (!string.IsNullOrEmpty(Model.AreaName))
    {
    @:@string.Format("[Area(\"{0}\")]", Model.AreaName)
    }
}
    public class @Model.ControllerName : Controller
    {
        private readonly @Model.ContextTypeName _db;

        public @(Model.ControllerName)(@Model.ContextTypeName db)
        {
            _db = db;
        }

        // GET: @routePrefix
@{
        @:public async Task<IActionResult> Index()
        @:{
    string includeExpressions = "";
    includeExpressions = String.Join("", relatedProperties
        .Values
        .Select(property => String.Format(".Include({0} => {0}.{1})", lambdaVar, property.AssociationPropertyName)));
            @:return View(
                    @:new @(entitySetName)IndexVM(
                        @:"@(entitySetName)",
                        @:"@(entitySetName)",
                        @:new List<PageLinks>() { PageLinks.Create },
                        @:await _db.@(entitySetName)
                            @:@includeExpressions
                            @:.ToListAsync()
                    @:)
            @:);
}        }

        // GET: @routePrefix/Details/5
        public async Task<IActionResult> Details(@primaryKeyNullableTypeName id)
        {
            if (id == null)
            {
                return NotFound();
            }

            @Model.ModelTypeName @Model.ModelVariable = await _db.@(entitySetName)
                                                @inlineIncludes
                                                    .FirstOrDefaultAsync(e => e.@primaryKeyName == id);
            if (@Model.ModelVariable == null)
            {
                return NotFound();
            }

            return View(
                    "Display",
                    new @(entitySetName)DisplayVM(
                        true,
                        "@Model.ModelTypeName",
                        "@Model.ModelTypeName",
                        new List<PageLinks>() { PageLinks.BackToList, PageLinks.Edit },
                        @Model.ModelVariable
                    )
            );
        }

        // GET: @routePrefix/Upsert/5
        public async Task<IActionResult> Upsert(@primaryKeyNullableTypeName id)
        {
            bool isCreate = id == null;
            @Model.ModelTypeName @Model.ModelVariable = null;

            if (!isCreate)
            {
                // Extra stuff for Edit
                @Model.ModelVariable = await _db.@(entitySetName).FirstOrDefaultAsync(e => e.@primaryKeyName == id);
                if (@Model.ModelVariable == null)
                {
                    return NotFound();
                }
            }

            return View(
                Get@(entitySetName)UpsertVM(
                    isCreate, 
                    new Dictionary<string,SelectList­>(){
@{
    int nbVals = relatedProperties.Values.Count;
    int cpt = 0;
    foreach (var property in relatedProperties.Values)
    {
                        @:{ "@("ListFor" + property.ForeignKeyPropertyNames[0])", new SelectList(_db.@property.EntitySetName, "@property.PrimaryKeyNames[0]", "@property.DisplayPropertyName") }@(cpt < nbVals?",":"")
    }
}
                    }, 
                    @Model.ModelVariable
                )
            );
        }

        // POST: @routePrefix/Upsert
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Upsert(@(entitySetName)UpsertVM vm)
        {
            if(vm.IsCreate)
            {
                ModelState.Remove("@(Model.ModelTypeName).@primaryKeyName");
            }

            if (ModelState.IsValid)
            {
                if (vm.IsCreate)
                {
                    _db.Add(vm.@(Model.ModelTypeName));
                }
                else
                {
                    try
                    {
                        _db.Update(vm.@(Model.ModelTypeName));
                    }
                    catch (DbUpdateConcurrencyException)
                    {
                        if (!@(Model.ModelTypeName)Exists(vm.@(Model.ModelTypeName).@primaryKeyName))
                        {
                            return NotFound();
                        }
                        else
                        {
                            throw;
                        }
                    }
                }
                await _db.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }

            return View(
                    Get@(entitySetName)UpsertVM(
                        vm.IsCreate, 
                        new Dictionary<string,SelectList­>(){
@{
    nbVals = relatedProperties.Values.Count;
    cpt = 0;
    foreach (var property in relatedProperties.Values)
    {
                        @:{ "@("ListFor" + property.ForeignKeyPropertyNames[0])", new SelectList(_db.@property.EntitySetName, "@property.PrimaryKeyNames[0]", "@property.DisplayPropertyName") }@(cpt < nbVals?",":"")
    }
}
                        }, 
                        vm.@(Model.ModelTypeName)
                    )
            );
        }

        // GET: @routePrefix/Delete/5
        public async Task<IActionResult> Delete(@primaryKeyNullableTypeName id)
        {
            if (id == null)
            {
                return NotFound();
            }

            @Model.ModelTypeName @Model.ModelVariable = await _db.@(entitySetName)
                                                @inlineIncludes
                                                    .FirstOrDefaultAsync(e => e.@primaryKeyName == id);
            if (@Model.ModelVariable == null)
            {
                return NotFound();
            }

            return View(
                    "Display",
                    new @(entitySetName)DisplayVM(
                        false,
                        "@Model.ModelTypeName",
                        "Are you sure you want to delete this @Model.ModelTypeName",
                        new List<PageLinks>() { PageLinks.BackToList },
                        @Model.ModelVariable,
                        "Supprimer"
                    )
            );
        }

        // POST: @routePrefix/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(@primaryKeyShortTypeName id)
        {
            @(Model.ModelTypeName) @Model.ModelVariable = await _db.@(entitySetName).FindAsync(id);
            _db.@(entitySetName).Remove(@Model.ModelVariable);
            await _db.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool @(Model.ModelTypeName)Exists(@primaryKeyShortTypeName id)
        {
            return _db.@(entitySetName).Any(e => e.@primaryKeyName == id);
        }

        private @(entitySetName)UpsertVM Get@(entitySetName)UpsertVM(bool isCreate, Dictionary<string,SelectList­> selectLists, @(Model.ModelTypeName) @Model.ModelVariable = null)
        {
            return new @(entitySetName)UpsertVM(
                        isCreate,
                        "@(Model.ModelTypeName)",
                        "@(Model.ModelTypeName)",
                        new List<PageLinks>() { PageLinks.BackToList },
                        isCreate ? "Ajouter" : "Modifier",
                        selectLists,
                        @Model.ModelVariable
            );
        }
    }
}
@functions
{
    // This function converts the primary key short type name to its nullable equivalent when possible. This is required to make
    // sure that an HTTP 400 error is thrown when the user tries to access the edit, delete, or details action with null values.
    string GetNullableTypeName(string typeName, string shortTypeName)
    {
        // The exceptions are caught because if for any reason the type is user defined, then the short type name will be used.
        // In that case the user will receive a server error if null is passed to the edit, delete, or details actions.
        Type primaryKeyType = null;
        try
        {
            primaryKeyType = Type.GetType(typeName);
        }
        catch
        {
        }
        if (primaryKeyType != null && (!Microsoft.VisualStudio.Web.CodeGeneration.Templating.TypeUtilities.IsNullable(primaryKeyType) || IsGuid(typeName)))
        {
            return shortTypeName + "?";
        }
        return shortTypeName;
    }

    bool IsGuid(string typeName) {
        return String.Equals("System.Guid", typeName, StringComparison.OrdinalIgnoreCase);
    }
}
